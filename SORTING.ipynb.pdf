{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5xZx1uqpGTL8",
        "outputId": "431c7501-8b40-4173-bbba-55ea4a21628a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[], [], [0.23, 0.25], [0.32], [0.42, 0.47], [0.52, 0.51], []]\n",
            "[[], [], [0.23, 0.25], [0.32], [0.42, 0.47], [0.51, 0.52], []]\n",
            "0.23\n",
            "0.25\n",
            "0.32\n",
            "0.42\n",
            "0.47\n",
            "0.51\n",
            "0.52\n"
          ]
        }
      ],
      "source": [
        "#BUCKET SORT\n",
        "\n",
        "import math\n",
        "array=[0.42,0.32,0.23,0.52,0.25,0.47,0.51]\n",
        "output=[]\n",
        "for i in range (0,len(array)):\n",
        "  output.append([])\n",
        "for j in array:\n",
        "  x=int(j*10)\n",
        "  output[x].append(j)\n",
        "print(output)\n",
        "for k in range (len(array)):\n",
        "  output[k]=sorted(output[k])\n",
        "print(output)\n",
        "output=sum(output,[])\n",
        "for k in output:\n",
        "  print(k)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# COUTING SORT\n",
        "\n",
        "input=[10,7,1,2,8,6,3,5]\n",
        "max=input[0]\n",
        "for i in input:\n",
        "  if max<i:\n",
        "    max=i\n",
        "print(max)\n",
        "count=[0]*(max+1)\n",
        "\n",
        "\n",
        "for i in input:\n",
        "  count[i]=count[i]+1\n",
        "print(count)\n",
        "\n",
        "for i in range(1,len(count)):\n",
        "  count[i]=count[i-1]+count[i]\n",
        "print(count)\n",
        "output=[0]*len(input)\n",
        "\n",
        "for j in input:  # 4 6 5 4\n",
        "  x=count[j]       \n",
        "  x=x-1\n",
        "  output[x]=j\n",
        "  count[j]=count[j]-1\n",
        "print(input)\n",
        "print(output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9fLp3OCBNPQM",
        "outputId": "1badcb55-0520-4815-da45-cb0cfbef0f14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "[0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1]\n",
            "[0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8]\n",
            "[10, 7, 1, 2, 8, 6, 3, 5]\n",
            "[1, 2, 3, 5, 6, 7, 8, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Heap Sort in python\n",
        "\n",
        "\n",
        "def heapify(arr, n, i):\n",
        "      # Find largest among root and children\n",
        "      largest = i\n",
        "      l = 2 * i + 1\n",
        "      r = 2 * i + 2\n",
        "  \n",
        "      if l < n and arr[i] < arr[l]:\n",
        "          largest = l\n",
        "  \n",
        "      if r < n and arr[largest] < arr[r]:\n",
        "          largest = r\n",
        "  \n",
        "      # If root is not largest, swap with largest and continue heapifying\n",
        "      if largest != i:\n",
        "          arr[i], arr[largest] = arr[largest], arr[i]\n",
        "          heapify(arr, n, largest)\n",
        "  \n",
        "  \n",
        "def heapSort(arr):\n",
        "      n = len(arr)\n",
        "  \n",
        "      # Build max heap\n",
        "      for i in range(n//2, -1, -1):\n",
        "          heapify(arr, n, i)\n",
        "  \n",
        "      for i in range(n-1, 0, -1):\n",
        "          # Swap\n",
        "          arr[i], arr[0] = arr[0], arr[i]\n",
        "  \n",
        "          # Heapify root element\n",
        "          heapify(arr, i, 0)\n",
        "  \n",
        "  \n",
        "arr =[10,7,1,2,8,6,3,5]\n",
        "\n",
        "heapSort(arr)\n",
        "n = len(arr)\n",
        "print(arr)\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JXpzoLsr9-9K",
        "outputId": "7dbea9b6-db8d-49e2-c631-580598e4b5c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 5, 6, 7, 8, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# RADIX SORT\n",
        "\n",
        "radix=[121, 432, 564, 23, 1, 45, 788]\n",
        "z=[]\n",
        "max=radix[0]\n",
        "for i in radix:\n",
        "  if i>max:\n",
        "    max=i\n",
        "max=str(max)\n",
        "i=0\n",
        "while i<len(max):\n",
        "  for j in range(0,len(radix)):\n",
        "      print(radix[j])\n",
        "      x=int(radix[j]%10)\n",
        "      print(x)\n",
        "      # print(radix[j],x)\n",
        "      z.append(x)\n",
        "      radix[j]=radix[j]//10\n",
        "      # print(radix[j])\n",
        "  print(z)\n",
        "  radix=sorted(z)\n",
        "  print(radix)\n",
        "  i=i+1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BSTSYvxITJtR",
        "outputId": "95913dab-db8c-45d4-85d0-b5c093df7204"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "121\n",
            "1\n",
            "432\n",
            "2\n",
            "564\n",
            "4\n",
            "23\n",
            "3\n",
            "1\n",
            "1\n",
            "45\n",
            "5\n",
            "788\n",
            "8\n",
            "[1, 2, 4, 3, 1, 5, 8]\n",
            "[1, 1, 2, 3, 4, 5, 8]\n",
            "1\n",
            "1\n",
            "1\n",
            "1\n",
            "2\n",
            "2\n",
            "3\n",
            "3\n",
            "4\n",
            "4\n",
            "5\n",
            "5\n",
            "8\n",
            "8\n",
            "[1, 2, 4, 3, 1, 5, 8, 1, 1, 2, 3, 4, 5, 8]\n",
            "[1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 8, 8]\n",
            "1\n",
            "1\n",
            "1\n",
            "1\n",
            "1\n",
            "1\n",
            "1\n",
            "1\n",
            "2\n",
            "2\n",
            "2\n",
            "2\n",
            "3\n",
            "3\n",
            "3\n",
            "3\n",
            "4\n",
            "4\n",
            "4\n",
            "4\n",
            "5\n",
            "5\n",
            "5\n",
            "5\n",
            "8\n",
            "8\n",
            "8\n",
            "8\n",
            "[1, 2, 4, 3, 1, 5, 8, 1, 1, 2, 3, 4, 5, 8, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 8, 8]\n",
            "[1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 8, 8, 8, 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "newarray=[6,5,12,10,9,1]\n",
        "print(newarray)\n",
        "res=merge_sort(newarray)\n",
        "print(res)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zDHLh6xEUqPg",
        "outputId": "b83e4e78-6645-4f6f-816e-d64e75e5c9a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6, 5, 12, 10, 9, 1]\n",
            "[1, 5, 6, 9, 10, 12]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def merge_sort(array):\n",
        "  if len(array)<=1:\n",
        "    return array\n",
        "  mid=(len(array))//2\n",
        "  left=merge_sort(array[:mid])\n",
        "  right=merge_sort(array[mid:])\n",
        "  return merge(left,right)"
      ],
      "metadata": {
        "id": "yh2XsWnzWhMg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def merge(left,right):\n",
        "  i=0\n",
        "  j=0\n",
        "  result=[]\n",
        "  while i<len(left) and j<len(right):\n",
        "    if left[i]< right[j]:\n",
        "      result.append(left[i])\n",
        "      i+=1\n",
        "    elif right[j]< left[i]:\n",
        "      result.append(right[j])\n",
        "      j+=1\n",
        "  result.extend(left[i:])\n",
        "  result.extend(right[j:])\n",
        "  return result"
      ],
      "metadata": {
        "id": "df9JPuxsW4Dy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[8,7,6,1,0,9,2]\n",
        "print(quick_sort(arr))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EglEHmAIwaGY",
        "outputId": "a67cc2ff-f7e0-455a-aba8-0628ad4d8b7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 2, 6, 7, 8, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def quick_sort(array):\n",
        "  if len(array)<=1:\n",
        "    return array\n",
        "  else:\n",
        "    pivot=array.pop()\n",
        "  great=[]\n",
        "  lower=[]\n",
        "  for i in array:\n",
        "    if i >= pivot:\n",
        "      great.append(i)\n",
        "    elif i<pivot:\n",
        "      lower.append(i)\n",
        "  return quick_sort(lower)+[pivot]+ quick_sort(great)\n",
        "  "
      ],
      "metadata": {
        "id": "NXhu8zKUzP6F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#selection\n",
        "select=[1,2,2,3,3]\n",
        "for i in range (0,len(select)):\n",
        "  x=i\n",
        "  min=i\n",
        "  print(\"first element:\",select[min])\n",
        "  for j in range(i+1,len(select)):\n",
        "    if select[j]<select[min]:\n",
        "      x=j\n",
        "  print(\"MINIMUM\",select[x])\n",
        "  temp=select[x]\n",
        "  select[x]=select[min]\n",
        "  select[min]=temp\n",
        "  print(select)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_fZZH8Fy0vZJ",
        "outputId": "9b307901-d419-4a1c-b48f-870df16b3a27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "first element: 1\n",
            "MINIMUM 1\n",
            "[1, 2, 2, 3, 3]\n",
            "first element: 2\n",
            "MINIMUM 2\n",
            "[1, 2, 2, 3, 3]\n",
            "first element: 2\n",
            "MINIMUM 2\n",
            "[1, 2, 2, 3, 3]\n",
            "first element: 3\n",
            "MINIMUM 3\n",
            "[1, 2, 2, 3, 3]\n",
            "first element: 3\n",
            "MINIMUM 3\n",
            "[1, 2, 2, 3, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#INSERTION\n",
        "\n",
        "insert=[6, 5, 3, 2, 8, 10, 9]\n",
        "k=3\n",
        "c=0\n",
        "for i in range (1,len(insert)):\n",
        "  temp=insert[i]\n",
        "  while insert[i-1]> temp and i>0 and c<=k:\n",
        "    insert[i-1],insert[i]=insert[i],insert[i-1]\n",
        "    i=i-1\n",
        "    c=c+1\n",
        "print(insert)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Owkr7H6E47Ae",
        "outputId": "8e432ba1-97c0-46d7-e143-63505e2a46d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3, 5, 2, 6, 8, 10, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def heapify(arr,n,i):\n",
        "  largest=i\n",
        "  l=2*i+1\n",
        "  r=2*i+2\n",
        " \n",
        "\n",
        "  if l < n and arr[l]< arr[]  :\n",
        "    largest=l\n",
        "  if r<n and arr[r] > arr[i] :\n",
        "    largest=r\n",
        "  if largest!=i:\n",
        "    arr[i],arr[largest]=arr[largest],arr[i]\n",
        "  heapify(arr,n,largest)\n",
        "\n",
        "def heapsort(arr):\n",
        "  n=len(arr)\n",
        "  for i in range(n//2,-1,-1):\n",
        "    heapify(arr,n,i)\n",
        "\n",
        "  for i in range(n-1,0,-1):\n",
        "    arr[i],arr[0]=arr[0],arr[i]\n",
        "    heapify(arr,n,0)\n",
        "\n",
        "arr=[1, 12, 9, 5, 6, 10]\n",
        "heapsort(arr)\n",
        "for i in range(0,len(arr)):\n",
        "  print(arr[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "id": "RPo79uK_pvWl",
        "outputId": "7a35dab8-e27e-4773-f492-388394bfefc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "RecursionError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRecursionError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-1c471bb104a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mheapsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-1c471bb104a1>\u001b[0m in \u001b[0;36mheapsort\u001b[0;34m(arr)\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m//\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0mheapify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-1c471bb104a1>\u001b[0m in \u001b[0;36mheapify\u001b[0;34m(arr, n, i)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mlargest\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mheapify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mheapsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "... last 1 frames repeated, from the frame below ...\n",
            "\u001b[0;32m<ipython-input-18-1c471bb104a1>\u001b[0m in \u001b[0;36mheapify\u001b[0;34m(arr, n, i)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mlargest\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mheapify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mheapsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRecursionError\u001b[0m: maximum recursion depth exceeded in comparison"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def heapsort(arr):\n",
        "  n=len(arr)\n",
        "  for i in range(n//2,-1,-1):\n",
        "    heapify(arr,n,i)\n",
        "\n",
        "  for i in range(n-1,0,-1):\n",
        "    arr[i],arr[0]=arr[0],arr[i]\n",
        "    heapify(arr,n,0)"
      ],
      "metadata": {
        "id": "0WAbXpNgqdft"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[1, 12, 9, 5, 6, 10]\n",
        "heapsort(arr)\n",
        "for i in range(0,len(arr)):\n",
        "  print(arr[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "mqAB-klUrJJp",
        "outputId": "cb080868-811d-4e02-ccc0-497dfde14e1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "RecursionError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRecursionError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-17-521d058c2bdf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mheapsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-16-c25d8ff1a543>\u001b[0m in \u001b[0;36mheapsort\u001b[0;34m(arr)\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m//\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mheapify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-15-8dfe9d9192de>\u001b[0m in \u001b[0;36mheapify\u001b[0;34m(arr, n, i)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mlargest\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mheapify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "... last 1 frames repeated, from the frame below ...\n",
            "\u001b[0;32m<ipython-input-15-8dfe9d9192de>\u001b[0m in \u001b[0;36mheapify\u001b[0;34m(arr, n, i)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mlargest\u001b[0m\u001b[0;34m!=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mheapify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlargest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mRecursionError\u001b[0m: maximum recursion depth exceeded in comparison"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Heap Sort in python\n",
        "\n",
        "\n",
        "def heapify(arr, n, i):\n",
        "      # Find largest among root and children\n",
        "      largest = i\n",
        "      l = 2 * i + 1\n",
        "      r = 2 * i + 2\n",
        "  \n",
        "      if l < n and arr[i] < arr[l]:\n",
        "          largest = l\n",
        "  \n",
        "      if r < n and arr[largest] < arr[r]:\n",
        "          largest = r\n",
        "  \n",
        "      # If root is not largest, swap with largest and continue heapifying\n",
        "      if largest != i:\n",
        "          arr[i], arr[largest] = arr[largest], arr[i]\n",
        "          heapify(arr, n, largest)\n",
        "  \n",
        "  \n",
        "def heapSort(arr):\n",
        "      n = len(arr)\n",
        "  \n",
        "      # Build max heap\n",
        "      for i in range(n//2, -1, -1):\n",
        "          heapify(arr, n, i)\n",
        "  \n",
        "      for i in range(n-1, 0, -1):\n",
        "          # Swap\n",
        "          arr[i], arr[0] = arr[0], arr[i]\n",
        "  \n",
        "          # Heapify root element\n",
        "          heapify(arr, i, 0)\n",
        "  \n",
        "  \n",
        "arr = [1, 12, 9, 5, 6, 10]\n",
        "heapSort(arr)\n",
        "n = len(arr)\n",
        "print(\"Sorted array is\")\n",
        "for i in range(n):\n",
        "    print(\"%d \" % arr[i], end='')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZujF61Xsngu",
        "outputId": "c7a94f4f-9f4c-4e19-e1c0-0ddd56aa931a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted array is\n",
            "1 5 6 9 10 12 "
          ]
        }
      ]
    }
  ]
}
